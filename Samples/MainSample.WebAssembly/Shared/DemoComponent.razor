@using Nextended.Core.Extensions
@using System.Reflection.Metadata
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Demo">
        @ChildContent
    </MudTabPanel>
	@if (!string.IsNullOrEmpty(CodeFile))
	{
	    <MudTabPanel Text="Code">
            <MudCard>
            @if (CodeFiles.Length > 1)
            {
                <MudSelect Label="File" @bind-Value="@SelectedCodeFile" Variant="Variant.Outlined" Color="Color.Primary">
                    @foreach (var file in CodeFiles)
                    {
                        <MudSelectItem Value="@file">@System.IO.Path.GetFileName(file)</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudLink Href="@SelectedCodeFilePath" Target="_blank" Color="Color.Primary">Show on github</MudLink>
            </MudCard>
            <DynamicComponent Type="@RenderType" Parameters="@RenderParameters"/>
        </MudTabPanel>
	}
    @foreach (var doc in _docFiles)
    {
        <MudTabPanel Text="@("Documentation " + System.IO.Path.GetFileNameWithoutExtension(doc.Key))">
            <MudMarkdown Value="@doc.Value"></MudMarkdown>
        </MudTabPanel>
    }
</MudTabs>

@code {
    private const string baseAddress = "https://raw.githubusercontent.com/fgilde/MudBlazor.Extensions";
    private string baseAddressExtensions = $"{baseAddress}/main/MudBlazor.Extensions";
    private string baseAddressSampleApp = $"{baseAddress}/main/Samples/MainSample.WebAssembly";
    private string Path(string file) => $"{baseAddressSampleApp}{file.EnsureStartsWith("/")}";
    private Dictionary<string, string> _docFiles = new();
    private string _selectedCodeFile;
    [Inject] HttpClient http { get; set; }

    [Parameter]
    public string CodeFile
    {
        get => CodeFiles.FirstOrDefault();
        set => CodeFiles = new[] { value };
    }

    public string SelectedCodeFilePath { get; set; }
    [Parameter] public string[] CodeFiles { get; set; }
    [Parameter] public string[] DocFiles { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    private Type RenderType = typeof(PrettyCode);
    private Dictionary<string, object> RenderParameters;
    private string SelectedCodeFile
    {
        get => _selectedCodeFile;
        set
        {
            _selectedCodeFile = value;
            SelectedCodeFilePath = Path(value);
            RenderType = typeof(MudAlert);
            RenderParameters = new Dictionary<string, object>
            {
                { "Text", "Loading..." },
                { "Severity", Severity.Info }
            };
            StateHasChanged();
            
            RenderType = typeof(PrettyCode);
            RenderParameters = new Dictionary<string, object>
            {
                { "Title", SelectedCodeFile },
                { "CodeFile", SelectedCodeFilePath }
            };
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SelectedCodeFile = CodeFiles.FirstOrDefault();
        await base.OnInitializedAsync();
        try
        {
            foreach (var doc in DocFiles ?? Array.Empty<string>())
            {
                var v = await Load($"{baseAddressExtensions}{doc.EnsureStartsWith("/")}");
                if (!string.IsNullOrEmpty(v))
                    _docFiles.Add(doc, v);
            }
        }
        catch {}
    }

    private async Task<string> Load(string url)
    {
        try
        {
            var res = await http.GetStringAsync(url);
            return res;
        }
        catch {
            return null;
        }
    }
}
