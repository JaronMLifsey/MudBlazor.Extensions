@using MudBlazor.Extensions.Options
@using Nextended.Blazor.Models
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Helper
@inject IDialogService dialogService;
@implements IMudExFileDisplay

<span @onclick="@ShowCode" style="cursor: pointer; font-size: 10pt;text-decoration: underline; position: absolute; margin-top: -10px;">This is a self registered control for json files. Just implement IMudExFileDisplay. Click to see code</span>

<MudTextField ReadOnly="true" Value="@jsonValue" Variant="Variant.Outlined" T="string" Lines="16" Style="margin-top: 3px;"></MudTextField>

@code {
    [Inject] HttpClient http { get; set; }
    public string Name => "Most stupid json display"; // Name of your component. (Is displayed in menu if user wants to switch between multiple components for one file type)

    public bool CanHandleFile(IMudExFileDisplayInfos fileDisplayInfos) // Here you need to check if your component can handle the file. Please do this as accurate as possible to prevent using the wrong component for a file.
    {
        return fileDisplayInfos.ContentType == "application/json" || (fileDisplayInfos.ContentType == "text/plain" && fileDisplayInfos.FileName.EndsWith(".json"));
    }

    private IMudExFileDisplayInfos _fileDisplayInfos;
    [Parameter] // Important. The property for FileDisplayInfos from interface IMudExFileDisplayInfos needs to have the [Parameter] attribute
    public IMudExFileDisplayInfos FileDisplayInfos
    {
        get => _fileDisplayInfos;
        set
        {
            _fileDisplayInfos = value;
            UpdateJsonValue();
        }
    }

    // That's all you need to implement from Interface. All other code depends on your component and on what you want to archive

    
    private string jsonValue;

    private void UpdateJsonValue()
    {
        // Here we load the json string for given file
        if (FileDisplayInfos.ContentStream?.Length > 0)
            ReadJsonFromStream(FileDisplayInfos.ContentStream); // If we have already a valid stream we can use it
        else if (DataUrl.TryParse(FileDisplayInfos.Url, out var data)) // If not but given url is a data url we can use the bytes from it
            ReadJsonFromStream(new MemoryStream(data.Bytes));
        else if (!string.IsNullOrEmpty(FileDisplayInfos.Url)) // Otherwise we load the file
            new HttpClient().GetStreamAsync(FileDisplayInfos.Url).ContinueWith(t => ReadJsonFromStream(t.Result));
    }

    private void ReadJsonFromStream(Stream t)
    {
        using var reader = new StreamReader(t);
        jsonValue = reader.ReadToEnd();
        StateHasChanged();
    }


    private async Task ShowCode()
    {
        var file = GH.Path($"Shared/{GetType().Name}.razor");
        string code = await http.GetStringAsync(file);
        await dialogService.ShowComponentInDialogAsync<DemoMarkdown>("Code for this component", "Like this you can implement your own components that is responsible for a File",
            md =>
            {
                md.Value = CodeView.CodeAsMarkup(code);
            },
            dialog =>
            {
                dialog.Icon = Icons.Material.Filled.Code;
                dialog.Buttons = MudExDialogResultAction.Ok();

            },new DialogOptionsEx()
            {   
                DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.Glass),
                DragMode =MudDialogDragMode.Simple,
                CloseButton = true,
                Resizeable = true,
            });
    }

}

