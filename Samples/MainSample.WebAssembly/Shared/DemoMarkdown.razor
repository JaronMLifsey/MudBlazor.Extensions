@using Nextended.Core.Extensions
@using Markdig.Syntax.Inlines
@inject HttpClient Http

@if (CenterImagesAndHeadlines)
{
    <style>
        .mudexmarkdownpresenter h1,
        .mudexmarkdownpresenter h2,
        .mudexmarkdownpresenter h3,
        .mudexmarkdownpresenter h4,
        .mudexmarkdownpresenter h5,
        .mudexmarkdownpresenter h6,
        .mudexmarkdownpresenter img {
            display: block;
            margin-left: auto;
            margin-right: auto;
            text-align: center;
        }
    </style>
}


<div class="@GetCls()">
    <MudMarkdown OverrideLinkUrl="@LinkThat" CodeBlockTheme="@(MainLayout.Instance?.IsDark == true ? CodeBlockTheme.AtomOneDark : CodeBlockTheme.Default)" OverrideHeaderTypo="TypoConvert()" Value="@Value"></MudMarkdown>
</div>

@code {
    [Parameter]
    public bool CenterImagesAndHeadlines { get; set; }

    [Parameter]
    public string Value { get; set; }

    protected override Task OnInitializedAsync()
    {
        MainLayout.Instance.ThemeChanged += (_, _) => StateHasChanged();
        return base.OnInitializedAsync();
    }

    private string GetCls() => CenterImagesAndHeadlines ? "mudexmarkdownpresenter" : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadDocumentIfValueIsFile();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDocumentIfValueIsFile()
    {
        if (!string.IsNullOrEmpty(Value) && (Value.StartsWith("http") || Value.EndsWith(".md") || Value.Split(' ').Length == 1))
        {
            Value = await Http.LoadDocumentation(string.IsNullOrEmpty(Path.GetExtension(Value)) ? Value.EnsureEndsWith(".md") : Value);
            StateHasChanged();
        }
    }

    private static Func<Typo, Typo>? TypoConvert()
    {
        int factor = 2;
        return typo =>
        {
            var r = (int)typo + factor;
            return r < 0 ? Typo.h4 : (Typo)r;
        };
    }

    private string? LinkThat(LinkInline arg)
    {
        if (!arg.IsImage && arg.Url.EndsWith(".md"))
        {
            return $"/d/{Path.GetFileNameWithoutExtension(arg.Url)}";
        }
        
        return arg.Url;
    }

}
