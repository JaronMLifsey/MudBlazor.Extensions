@page "/theme-edit"

@attribute [Demo(Group = "MudExObjectEdit", Name = "Edit Current Theme", Order = 7, Documentation = "This demonstrate the MudExObjectEdit for an instance of a MudTheme ", Icon = Icons.Material.Outlined.Palette, ForComponentTypes = new[] { typeof(MudExObjectEdit<>), typeof(MudExObjectEditForm<>) })]


<DemoComponent PageType="@GetType()" DocFiles="@(new[] {"Docs/ObjectEdit.md"})" CodeFiles="@(new[] {$"Pages/{GetType().Name}.razor"})">
    @*<MudExEnumSelect TEnum="ThemeEditMode" @bind-Value="@_editMode"></MudExEnumSelect>*@

    <MudExThemeEdit AllowModeToggle="true" 
                    TTheme="ClientTheme"
                    IsDark="@MainLayout.Instance.IsDark" 
                    @bind-EditMode="@_editMode"
                    ThemeChanged="@ThemeChanged"
                    Theme="@ClientTheme.CurrentTheme"></MudExThemeEdit>
</DemoComponent>


@code {

    private ThemeEditMode _editMode { get; set; } = ThemeEditMode.Simple;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MainLayout.Instance.ThemeChanged += (_, _) => StateHasChanged();
    }


    private void ThemeChanged(ClientTheme? theme)
    {
        if (theme is not null)
            MainLayout.Instance.SetTheme(theme);
    }

}