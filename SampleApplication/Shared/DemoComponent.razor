@using Nextended.Core.Extensions
@using System.Reflection.Metadata
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Demo">
        @ChildContent
    </MudTabPanel>
    <MudTabPanel Text="Code">
        <PrettyCode Title="@CodeFile" CodeFile="@Path">
        </PrettyCode>
    </MudTabPanel>
    @foreach (var doc in _docFiles)
    {
        <MudTabPanel Text="@("Doc " + System.IO.Path.GetFileNameWithoutExtension(doc.Key))">
            <MudMarkdown Value="@doc.Value"></MudMarkdown>
        </MudTabPanel>
    }
</MudTabs>

@code {
    private const string baseAddress = "https://raw.githubusercontent.com/fgilde/MudBlazor.Extensions";
    private string baseAddressExtensions = $"{baseAddress}/main/MudBlazor.Extensions";
    private string baseAddressSampleApp = $"{baseAddress}/main/SampleApplication";
    private string Path => $"{baseAddressSampleApp}{CodeFile.EnsureStartsWith("/")}";

    private Dictionary<string, string> _docFiles = new();
    [Inject] HttpClient http { get; set; }
    [Parameter] public string CodeFile { get; set; }
    [Parameter] public string[] DocFiles { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        foreach (var doc in DocFiles)
        {
            var v = await Load($"{baseAddressExtensions}{doc.EnsureStartsWith("/")}");
            if (!string.IsNullOrEmpty(v))
                _docFiles.Add(doc, v);
        }
    }

    private async Task<string> Load(string url)
    {
        try
        {
            var res = await http.GetStringAsync(url);
            return res;
        }
        catch {
            return null;
        }
    }
}
