@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime

<MudThemeProvider Theme="@ClientTheme.DefaultTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudOverlay @bind-Visible="IsOverlayVisible" DarkBackground="true" AutoClose="true">
    @*<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />*@
</MudOverlay>

<MudLayout>

    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Palette" Color="Color.Inherit" OnClick="@EditTheme"/>
        <MudIconButton Icon="@Icons.Custom.Brands.Microsoft" Color="Color.Inherit" Link="https://www.nuget.org/packages/MudBlazor.Extensions" Target="_blank"/>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/fgilde/MudBlazor.Extensions" Target="_blank"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">MudBlazor.Extensions</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    [Inject] public IDialogService DialogService { get; set; }
    public bool IsOverlayVisible { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JsRuntime.InitializeMudBlazorExtensionsAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task EditTheme()
    {
        IsOverlayVisible = true;
        await Task.Delay(1);
        ClientTheme.DefaultTheme = await OpenThemeEdit();
        IsOverlayVisible = false;
        StateHasChanged();
    }

    private Task<ClientTheme> OpenThemeEdit()
    {
        return Task.Run(async () =>
        {
            var parameters = new DialogParameters
            {
                {nameof(MudExObjectEditDialog<ClientTheme>.ShowCancelButton), false},
                {nameof(MudExObjectEditDialog<ClientTheme>.SaveButtonText), "Close"},
                {nameof(MudExObjectEditDialog<ClientTheme>.DialogIcon), Icons.Material.Filled.Palette},
                {nameof(MudExObjectEditDialog<ClientTheme>.ShowPathAsTitleForEachProperty), true}
            };
            var result = await DialogService.EditObject(ClientTheme.DefaultTheme, "Edit current Theme with MudExObjectEdit", new DialogOptionsEx()
            {
                MaximizeButton = true,
                CloseButton = true,
                FullHeight = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                DragMode = MudDialogDragMode.Simple,
                Animations = new[] { AnimationType.SlideIn },
                Position = DialogPosition.CenterRight,
                DisableSizeMarginY = true,
                DisablePositionMargin = true
            }, null, parameters);
            return result.Result;
        });
    }

}