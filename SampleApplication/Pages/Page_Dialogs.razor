@page "/dialogs"
@using MudBlazor.Extensions.Options
@inject IJSRuntime Js
@inject IDialogService dialogService;

<PageHeader>Sample Dialog</PageHeader>

<DemoComponent CodeFile="@($"Pages/{GetType().Name}.razor")">

    <MudExObjectEditForm ShowSaveButton="false" ToolbarColor="Color.Surface" ShowCancelButton="false" DefaultGroupName="Other" StickyToolbar="true" StickyActionBar="true" Value="@Options">
        <ToolBarContent>
            <MudNumericField Class="mr-5 mt-5 mb-5" FullWidth="false" Min="0" Max="30" Variant="Variant.Outlined" Disabled="@(OpenDialogTask != null)" @bind-Value="seconds" Label="@($"Dialog opens in {seconds}s")"></MudNumericField>
            <MudButton Disabled="@(OpenDialogTask != null)" OnClick="@ShowSampleDialog" Variant="Variant.Filled" Color="Color.Primary">Show Sample Dialog</MudButton>
        </ToolBarContent>
        <ActionContent>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@SetAsDefaultClick">Set as Default options for all Dialogs</MudButton>
        </ActionContent>
    </MudExObjectEditForm>

</DemoComponent>

@code {

    private Task OpenDialogTask;
    private int seconds = 2;
    MudDialogButton[] GetButtons() => new[] {
        new MudDialogButton( DotNetObjectReference.Create(this as object), nameof(AlarmClick)) {Icon = Icons.Filled.Alarm},
        new MudDialogButton( DotNetObjectReference.Create(this as object), nameof(ColorLensClick)) {Icon = Icons.Filled.ColorLens},
    };

    [JSInvokable]
    public void AlarmClick()
    {
        Js.InvokeVoidAsync("alert", "Alarm Clicked ");
    }

    [JSInvokable]
    public void ColorLensClick()
    {
        Js.InvokeVoidAsync("alert", "Color Lens Clicked");
    }

    public DialogOptionsEx Options { get; set; } = new()
        {
            MaximizeButton = true,
            CloseButton = true,
            FullHeight = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            DragMode = MudDialogDragMode.Simple,
            Animations = new[] { AnimationType.SlideIn },
            Position = DialogPosition.CenterRight,
            DisableSizeMarginY = true,
            DisablePositionMargin = true
        };

    private async Task WaitForDialog()
    {
        while (seconds > 0)
        {
            await Task.Delay(1000);
            seconds--;
            StateHasChanged();
        }
    }

    private async Task ShowSampleDialog()
    {
        var s = seconds;
        await (OpenDialogTask = WaitForDialog());
        seconds = s;
        OpenDialogTask = null;
        var options = Options.CloneOptions();
        options.Buttons = GetButtons();
        IDialogReference dlgReference = await dialogService.ShowEx<SampleDialog>("Simple Dialog", dialog => { dialog.ContentMessage = "Hello from dialog sample page"; }, options);
    }

    private async Task SetAsDefaultClick()
    {
        var confirmed = await dialogService.ShowConfirmationDialogAsync("Set as Default options for all Dialogs", "If you set this options as default. This options will be used for all dialogs where no options are specified. Continue?");
        if (confirmed)
            Options.SetAsDefaultDialogOptions();
    }

}
