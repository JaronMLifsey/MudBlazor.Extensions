@page "/dialogs"
@using MudBlazor.Extensions.Options
@using Nextended.Core.Extensions
@inject HttpClient Http
@inject IJSRuntime Js
@inject IDialogService dialogService;

<PageTitle>Sample Dialog</PageTitle>

<SampleApplication.Client.Shared.DemoComponent CodeFile="@($"Pages/{GetType().Name}.razor")">
    <MudGrid>
        <MudItem xs="2">
            <MudNumericField Min="0" Max="30" Variant="Variant.Outlined" Disabled="@(OpenDialogTask != null)" @bind-Value="seconds" Label="@($"Dialog opens in {seconds}s")"></MudNumericField>
        </MudItem>
        <MudItem xs="3">
            <MudButton Class="mt-3" Size="Size.Large" Disabled="@(OpenDialogTask != null)" OnClick="@ShowSampleDialog" Variant="Variant.Filled" Color="Color.Primary">Show Sample Dialog</MudButton>
        </MudItem>
    </MudGrid>
    
    <MudExObjectEdit DefaultGroupName="Other" Value="@Options"></MudExObjectEdit>
</SampleApplication.Client.Shared.DemoComponent>

@code {
    
    private Task OpenDialogTask;
    private int seconds = 2;
    MudDialogButton[] GetButtons() => new[] {
        new MudDialogButton( DotNetObjectReference.Create(this as object), nameof(AlarmClick)) {Icon = Icons.Filled.Alarm},
        new MudDialogButton( DotNetObjectReference.Create(this as object), nameof(ColorLensClick)) {Icon = Icons.Filled.ColorLens},
    };

    [JSInvokable]
    public void AlarmClick()
    {
        Js.InvokeVoidAsync("alert", "Alarm Clicked ");
    }

    [JSInvokable]
    public void ColorLensClick()
    {
        Js.InvokeVoidAsync("alert", "Color Lens Clicked");
    }

    public DialogOptionsEx Options { get; set; } = new()
    {
            MaximizeButton = true,
            CloseButton = true,
            FullHeight = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            DragMode = MudDialogDragMode.Simple,
            Animations = new[] { AnimationType.SlideIn },
            Position = DialogPosition.CenterRight,
            DisableSizeMarginY = true,
            DisablePositionMargin = true
    };

    private async Task WaitForDialog()
    {
        while (seconds > 0)
        {
            await Task.Delay(1000);
            seconds--;
            StateHasChanged();
        }
    }

    private async Task ShowSampleDialog()
    {
        var s = seconds;
        await (OpenDialogTask = WaitForDialog());
        seconds = s;
        OpenDialogTask = null;
        var options = Options.Clone();
        options.Buttons = GetButtons();
        await dialogService.ShowEx<SampleDialog>("Simple Dialog", dialog => { dialog.ContentMessage = "Hello from dialog sample page"; },options);
    }

}
