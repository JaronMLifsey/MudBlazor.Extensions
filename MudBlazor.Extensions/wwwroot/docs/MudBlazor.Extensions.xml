<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MudBlazor.Extensions</name>
    </assembly>
    <members>
        <member name="F:MudBlazor.Extensions.Components.MoveContentPosition.None">
            Can be used if you don't want to move the content but use the found or not found content
        </member>
        <member name="T:MudBlazor.Extensions.Components.MoveContent">
            <summary>
            Component to move the ChildContent to a specific element that can defined by ElementSelector.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCardList`1">
            <summary>
            Simple Card List with a hover effect.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExChipSelect`1">
            <summary>
            A component that allows the user to select a value from a list of possible values and display it as Chips or default Combobox.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExColorBubble">
            <summary>
            A Component to quickly select a color
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExColorEdit">
            <summary>
            Component to Edit MudExColor
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ForceSelectOfMudColor">
            <summary>
            Set to true to have always MudColor filled in MudExColor as the OneOf value.
            With this setting turned on, you can use this edit control for all of your Color Properties
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExColorPicker">
            <summary>
            A simple ColorPicker component that inherits the MudColorPicker but adds the possibility to delay the close event and use a native picker component from browser
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCultureSelect">
            <summary>
            Drop down component to select a culture
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDialog.Show(System.String,MudBlazor.DialogOptions)">
            <summary>Show this inlined dialog</summary>
            <param name="title"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExDivider">
            <summary>
            A divider to separate content
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.UseBorder">
            <summary>
            If this option is true border size is used instead of element size
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExEnumSelect`1">
            <summary>
            Drop down component to select an enum value or multiple on flags enums
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplay">
            <summary>
            Component to display a file in a iframe or object tag or in a registered viewer that implements IMudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.FallBackInIframe">
            Should be true if file is not a binary one
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ViewDependsOnContentType">
            <summary>
            Set this to false to show everything in iframe/object tag otherwise zip, images audio and video will displayed in correct tags
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.HandleContentErrorFunc">
            A function to handle content error. Return true if you have handled the error and false if you want to show the error message
            For example you can reset Url here to create a proxy fallback or display own not supported image or what ever.
            If you reset Url or Data here you need also to reset ContentType
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayDialog">
            <summary>
            Dialog to display a file using <see cref="T:MudBlazor.Extensions.Components.MudExFileDisplay"/> component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.HandleContentErrorFunc">
            A function to handle content error. Return true if you have handled the error and false if you want to show the error message
            For example you can reset Url here to create a proxy fallback or display own not supported image or what ever.
            If you reset Url or Data here you need also to reset ContentType
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.FallBackInIframe">
            Should be true if file is not a binary one
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.ViewDependsOnContentType">
            <summary>
            Set this to false to show everything in iframe/object tag otherwise zip, images audio and video will displayed in correct tags
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayZip">
            <summary>
            A Component to display the content of a zip file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ViewDependsOnContentType">
            <summary>
            Set this to false to show everything in iframe/object tag otherwise zip, images audio and video will displayed in correct tags
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.HandleContentErrorFunc">
            A function to handle content error. Return true if you have handled the error and false if you want to show the error message
            For example you can reset Url here to create a proxy fallback or display own not supported image or what ever.
            If you reset Url or Data here you need also to reset ContentType
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFontSelect">
            <summary>
            Dropdown list component to select one ore more fonts
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExGradientText">
            <summary>
            A Component to display text with a gradient foreground or background
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExMessageDialog">
            <summary>
            Simple MessageDialog
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExPopover">
            <summary>
            A Popover can be used to display some content on top of another.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSlideBar">
            <summary>
            A Component that can used to slide in a ChildContent from the bottom, top , left or right by mouseover.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSplitPanel">
            <summary>
            A SplitPanel Component 
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSplitPanelItem">
            <summary>
            SplitPanelItem for MudExSplitPanel component
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSplitter">
            <summary>
            A Splitter Component
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExTaskBar">
            <summary>
            MudExTaskBar inherits the MudExSlideBar and provides a tabbar to select non modal dialogs. Just provide <MudExTaskBar/> somewhere in your Layout
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.IsDark">
            <summary>
            This bool represents a tri state. True to edit only dark color palette, false to edit only light color palette and null to edit both
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExToggleableSearch">
            <summary>
            Simple component to expand a Search field 
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExUploadEdit`1">
            <summary>
            A Component to edit and upload a list of files
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1">
            <summary>
            Powerful component to edit a set of items and their properties.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1">
            <summary>
            A powerful component to edit an object and its properties.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.BeforeExport">
            Here you can change content of parameter to manipulate export data
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.BeforeImport">
            Here you can change content of parameter to manipulate import data
            For example you can remove some properties or change the values
            This is called before the import is executed
            importData.Json = "{\"FirstName\": \"Changed Test\"}";
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ConfigureMetaInformationAlways">
            If this setting is true a manual passed MetaInformation will also re configured
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RestoreState(System.Boolean)">
            <summary>
            Restore state if available and returns true if state was restored otherwise false.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1">
            <summary>
            Dialog for editing objects with the MudExObjectEditForm
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.CustomSubmit">
            <summary>
            Can be used as custom submit function. Dialog will only closed if result of this function is empty or null otherwise result will displayed as error message.
            This is usefull to keep dialog open until server save is succeeded
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1">
            <summary>
            Powerful component to edit an object and its properties.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit">
            <summary>
            Editor for a property of an object. Used internally inside the MudExObjectEdit
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExAppearance">
            <summary>
            The `MudExAppearance` class is a powerful tool that helps to manage CSS and styles of MudBlazor components dynamically. 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExAppearance.Class">
            <summary>
            Class to apply
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExAppearance.Style">
            <summary>
            CSS Style string to apply
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExAppearance.KeepExisting">
            <summary>
            Set to false to overwrite all existing classes and styles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.Empty">
            <summary>
            Factory method for an empty instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(MudBlazor.Extensions.Core.IMudExStyleAppearance)">
            <summary>
            Adds style to this appearance from given appearance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Object,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Adds style to this appearance from given styleObj
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Object,System.String,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Adds style to this appearance from given styleObj
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.String)">
            <summary>
            Adds style to this appearance from given styleString
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Action{MudBlazor.Extensions.Helper.MudExStyleBuilder})">
            <summary>
            Adds style to this appearance with passing a fluent Action with a MudExStyleBuilder
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Func{MudBlazor.Extensions.Helper.MudExStyleBuilder,System.Threading.Tasks.Task})">
            <summary>
            Adds style to this appearance with passing a async Func with a MudExStyleBuilder
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(System.String,System.String[])">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExColor">
            <summary>
            MudExColor is a readonly struct that provides a convenient and type-safe way to deal with color values in the context of MudBlazor.Extensions components.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToCssStringValue(MudBlazor.Utilities.MudColorOutputFormats)">
            <summary>
            Creates a css compatible string representation of the color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToMudColorAsync">
            <summary>
            Creates a MudColor independent of what the underlying type is.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToMudColor">
            <summary>
            Creates a MudColor independent of what the underlying type is.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.GetColorsFromThemeAsync(System.Int32)">
            <summary>
            Static helper method to list colors from current Theme
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExSize`1">
            <summary>
            MudExSize is a readonly struct that provides a convenient and type-safe way to deal with size values in the context of MudBlazor components.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExSize`1.Value">
            <summary>
            The value of the size.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExSize`1.SizeUnit">
            <summary>
            The unit of the size.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.#ctor(System.String)">
            <summary>
            Creates a new size by parsing an string like 3px or 10% etc
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.#ctor(`0,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Creates a new size
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.ToString">
            <summary>
            Returns the string representation that is fully compatible with all css sizes
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExColorUtils">
            <summary>
            MudExColor is a static utility class that provides a set of extension methods for working with Color and MudColor instances.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.CssVarName(MudBlazor.Color)">
            <summary>
            Returns the CSS variable name for the given color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.CssVarDeclaration(MudBlazor.Color)">
            <summary>
            Returns the CSS variable declaration for the given color. For example var(--mud-color-primary) for Color.Primary
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToDrawingColor(MudBlazor.Utilities.MudColor)">
            <summary>
            Converts a MudColor to a system drawing color
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToMudColorAsync(MudBlazor.Color)">
            <summary>
            Converts a Color enum value of Color (like Color.Primary) to a MudColor with the correct values filled
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCssBuilder">
            <summary>
            Simple Utility class to help with building css class strings
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExStyleBuilder">
            <summary>
            MudExStyleBuilder is useful to create style strings or convert any style to a class.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.Empty">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.FromObject(System.Object,System.String,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/> from an object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.FromStyle(System.String)">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/> from an existing style string.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.GenerateStyleString(System.Object,System.String)">
            <summary>
            Converts an object to a style string but only properties that are not passed in existingCss
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.GenerateStyleString(System.Object,MudBlazor.Extensions.Core.CssUnit,System.String)">
            <summary>
            Converts an object to a style string but only properties that are not passed in existingCss.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.CombineStyleStrings(System.String,System.String)">
            <summary>
            Combines two css style strings
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.StyleStringToObject``1(System.String)">
            <summary>
            Converts a css style string to an object
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.With(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            Adds a style to the builder if the condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.With(System.String,System.String,System.Boolean)">
            <summary>
            Adds a style to the builder if the condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.AsCssBuilderAsync">
            <summary>
            Creates a class for this style and returns a MudExCssBuilder with this class added
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.BuildAsClassRuleAsync(System.String,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Creates a class for this style and returns the name of the created class
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.RemoveClassRuleAsync(System.String,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Removes a class that is temporary created
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.Build">
            <summary>
            Builds the css style string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.ToObject``1">
            <summary>
            Converts this style to an object
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExStyleBuilder.Style">
            <summary>
            The css style string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.MudPopoverOptionsEx.ExcludedBlurSelectors">
            <summary>
            Click on any of this selectors will not close the popover if AutoHideOnBlur is true
            </summary>
        </member>
    </members>
</doc>
