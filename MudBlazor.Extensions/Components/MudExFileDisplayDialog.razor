@using BrowserFileExtensions = MudBlazor.Extensions.Extensions.BrowserFileExt
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Extensions.Options
@using Nextended.Blazor.Extensions
@using Nextended.Blazor.Helper

@namespace MudBlazor.Extensions.Components
@inject Microsoft.Extensions.Localization.IStringLocalizer<MudExFileDisplayDialog> localizer
<MudDialog Class="dialog-content-full-height overflow-hidden mud-ex-dialog-initial" ClassContent="full-height">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Color="Color.Error" Icon="@Icon" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudExFileDisplay FileName="@MudDialog?.Title" ContentStream="@ContentStream" ContentType="@ContentType" Url="@Url"></MudExFileDisplay>
    </DialogContent>

</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Icon { get; set; }
    [Parameter] public string Url { get; set; }
    [Parameter] public string ContentType { get; set; }
    [Parameter] public Stream ContentStream { get; set; }


    public static async Task<IDialogReference> Show(IDialogService dialogService, string url, string fileName, string contentType, Action<DialogOptionsEx> options = null)
    {
        var parameters = new DialogParameters
        {
            {nameof(Icon), BrowserFileExtensions.IconForFile(contentType)},
            {nameof(Url), url},
            {nameof(ContentType), contentType}
        };

        return await Show(dialogService, fileName, parameters, options);
    }

    public static async Task<IDialogReference> Show(IDialogService dialogService, IBrowserFile browserFile, Action<DialogOptionsEx> options = null)
    {
        if (MimeTypeHelper.IsZip(browserFile.ContentType))
        {
            var ms = new MemoryStream(await browserFile.GetBytesAsync());
            return await Show(dialogService, ms, browserFile.Name, browserFile.ContentType, options);
        }
        return await Show(dialogService, await browserFile.GetDataUrlAsync(), browserFile.Name, browserFile.ContentType, options);
    }

    public static async Task<IDialogReference> Show(IDialogService dialogService, Stream stream, string fileName, string contentType, Action<DialogOptionsEx> options = null)
    {
        var parameters = new DialogParameters
        {
            {nameof(Icon), BrowserFileExtensions.IconForFile(contentType)},
            {nameof(ContentStream), stream},
            {nameof(ContentType), contentType}
        };

        return await Show(dialogService, fileName, parameters, options);
    }

    private static async Task<IDialogReference>  Show(IDialogService dialogService, string fileName, DialogParameters parameters, Action<DialogOptionsEx> options = null)
    {
        var optionsEx = new DialogOptionsEx
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraExtraLarge,
            FullWidth = true,
            DisableBackdropClick = false,
            MaximizeButton = true,
            DragMode = MudDialogDragMode.Simple,
            Position = DialogPosition.BottomCenter,
            Animations = new []{AnimationType.FadeIn, AnimationType.SlideIn},
            AnimationDuration = TimeSpan.FromSeconds(1),
            FullHeight = true,
            Resizeable = true
        };
        options?.Invoke(optionsEx);

        return await dialogService.ShowEx<MudExFileDisplayDialog>(fileName, parameters, optionsEx);
    }

}