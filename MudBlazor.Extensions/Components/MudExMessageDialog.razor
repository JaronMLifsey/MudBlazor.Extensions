@using Microsoft.Extensions.Localization
@using MudBlazor.Extensions.Helper
@using Microsoft.Extensions.DependencyInjection;
@namespace MudBlazor.Extensions.Components

<MudDialog Style="@Style" Class="@Class" ClassContent="@ClassContent">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Color="Color.Error" Icon="@Icon" Class="mr-3 mb-n1"/>
            @localizer.TryLocalize(MudDialog.Title)
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (!string.IsNullOrEmpty(Message))
        {
            <MudText>@localizer.TryLocalize(Message)</MudText>
        }
        @if (Content != null)
        {
            @Content
        }
    </DialogContent>
    <DialogActions>
        @if (Buttons?.Any() == true)
        {
            foreach (var action in Buttons)
            {
                <MudButton Color="@action.Color" Variant="@action.Variant" OnClick="@(() => Submit(action.Result))">@localizer.TryLocalize(action.Label)</MudButton>
            }
        }
        else
        {
            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="Cancel">@localizer.TryLocalize("Close")</MudButton>
        }
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IServiceProvider _serviceProvider { get; set; }

    private IStringLocalizer<MudExMessageDialog> localizer => _serviceProvider.GetService<IStringLocalizer<MudExMessageDialog>>();
    
    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public string Class { get; set; } = "mud-ex-dialog-initial";
    [Parameter] public string ClassContent { get; set; } = string.Empty;

    [Parameter] public string Message { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public IEnumerable<string> Details { get; set; }
    [Parameter] public MudExDialogResultAction[] Buttons { get; set; }
    [Parameter] public RenderFragment Content { get; set; }
    //[Parameter]public Func<bool> CanConfirmFn { get; set; }
    
    internal ComponentBase Component { get; set; }
    
    
    void Submit(DialogResult result)
    {
        MudDialog.Close(result);
    }

    void Cancel() => MudDialog.Cancel();


    //private bool CanEexecute(MudExDialogResultAction action)
    //{
    //    return action.Result != DialogResult.Ok(true) || CanConfirmFn == null || CanConfirmFn();
    //}

}