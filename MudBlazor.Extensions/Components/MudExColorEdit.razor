@inherits MudPicker<MudExColor>
@implements IMudExComponent
@using MudBlazor.Extensions.Core
@using MudBlazor.Utilities
@using System.Reflection;
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Localization
@using MudBlazor.Extensions.Helper

@Render

@code {

    
    [Inject] protected IServiceProvider ServiceProvider { get; set; }
    private IStringLocalizer<MudExColorEdit> _fallbackLocalizer => ServiceProvider.GetService<IStringLocalizer<MudExColorEdit>>();
    protected IStringLocalizer LocalizerToUse => Localizer ?? _fallbackLocalizer;

    [Parameter] public IStringLocalizer Localizer { get; set; }
    [Parameter] public Variant FilterVariant { get; set; }
    [Parameter] public MudExColor Value{ get => _value; set => _value = value;}
    [Parameter] public bool ShowThemeColors { get; set; } = true;
    [Parameter] public bool ShowHtmlColors { get; set; } = true;
    [Parameter] public bool ShowCssColorVariables { get; set; } = true;
    [Parameter] public string Filter { get; set; }
    [Parameter] public ColorPreviewMode PreviewMode { get; set; } = ColorPreviewMode.Both;
    [Parameter] public EventCallback<MudExColor> ValueChanged { get; set; }

    private KeyValuePair<string, MudColor>[] _cssVars;
    
    private bool HasDefinedColors => ShowThemeColors || ShowHtmlColors || ShowCssColorVariables;

    public string TryLocalize(string text, params object[] args) => LocalizerToUse.TryLocalize(text, args);


    protected override void OnInitialized()
    {
        MudExCss.GetCssColorVariablesAsync().ContinueWith(t => _cssVars = t.Result);
        AdornmentIcon = Icons.Material.Filled.ColorLens;
        Editable = true;
        Converter = new DefaultConverter<MudExColor>();
        Converter.GetFunc = OnGet;
        Converter.SetFunc = OnSet;
        Class = string.IsNullOrEmpty(Class) || !Class.Contains("mud-ex-color-edit") ? $"{Class} mud-ex-color-edit" : Class;
        base.OnInitialized();
    }

    private bool Matches(string value)
    {
        return string.IsNullOrEmpty(Filter) 
               || value.Contains(Filter, StringComparison.InvariantCultureIgnoreCase);
    }

    protected override Task OnParametersSetAsync()
    {
        Text = Value.ToString();
        UpdatePreview();
        return base.OnParametersSetAsync();
    }

    private string OnSet(MudExColor color)
    {
        UpdatePreview();
        return Text = color.ToString();
    }

    private void UpdatePreview()
    {
        Style = MudExStyleBuilder.Empty()
            .WithColor(Value, PreviewMode is ColorPreviewMode.Text or ColorPreviewMode.Both)
            .WithFill(Value, PreviewMode is ColorPreviewMode.Icon or ColorPreviewMode.Both)
            .Build();
    }

    private MudExColor OnGet(string value) => Value = new MudExColor(value);

    protected override Task StringValueChanged(string value)
    {
        Touched = true;
        Value = Converter.Get(value);
        UpdatePreview();
        return ValueChanged.InvokeAsync(Value);
    }


    protected override RenderFragment PickerContent => GetPickerContent();

    private RenderFragment GetPickerContent()
    {
        return 
        @<MudTabs Class="mud-ex-color-edit-picker" TabHeaderClass="mud-ex-tab-bar-sticky" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @if (HasDefinedColors)
            {
                <MudTabPanel Text="Defined">
                    <MudTextField Clearable="true" Class="m-0" Style="margin-top: -20px;" Variant="@FilterVariant" Immediate="true" Placeholder="@TryLocalize("Filter")" @bind-Value="@Filter" T="string"></MudTextField>
                    <MudPaper Elevation="0">
                        <MudList Class="m-0" Clickable="true">
                            @if (ShowThemeColors)
                            {
                                <MudExDivider Label="@TryLocalize("Theme")" Size="2" Color="Color.Primary"/>
                                @foreach (Color color in Enum.GetValues(typeof(Color)))
                                {
                                    @if (Matches(color.ToString()))
                                    {
                                        <MudListItem OnClick="@(() => Select(color))" Text="@color.ToString()" Icon="@Icons.Material.Filled.ColorLens" IconColor="@color"/>
                                    }
                                }
                            }
                            @if (ShowHtmlColors)
                            {
                                <MudExDivider Label="@TryLocalize("HTML Colors")" Size="2" Color="Color.Primary"/>
                                @foreach (var color in typeof(System.Drawing.Color).GetProperties(BindingFlags.Static | BindingFlags.Public))
                                {
                                    @if (Matches(color.Name))
                                    {
                                        <MudListItem UserAttributes="@(new Dictionary<string, object> {{"data-color", color.Name.ToLower()}})"
                                                     Class="@($"mud-ex-color-edit-picker-html-list-item-{color.Name.ToLower()}")" OnClick="@(() => Select(color.Name))" Text="@color.Name" Icon="@Icons.Material.Filled.ColorLens">
                                            <style>
                                                    .mud-ex-color-edit-picker-html-list-item-@(color.Name.ToLower()) .mud-icon-root {
                                                        fill: @(color.Name.ToLower()) !important;
                                                    }
                                                </style>
                                            @color.Name
                                        </MudListItem>
                                    }
                                }
                            }
                            @if (ShowCssColorVariables)
                            {
                                <MudExDivider Label="@TryLocalize("CSS Variables")" Size="2" Color="Color.Primary"/>

                                @foreach (var cssVar in _cssVars)
                                {
                                    @if (Matches(cssVar.Key))
                                    {
                                        <MudListItem OnClick="@(() => { Select($"var({cssVar.Key})");})"
                                                     Class="@($"mud-ex-color-edit-picker-html-list-item-{cssVar.Key.ToLower()}")"
                                                     Text="@cssVar.Key" Icon="@Icons.Material.Filled.ColorLens">
                                            <style>
                                                .mud-ex-color-edit-picker-html-list-item-@(cssVar.Key.ToLower()) .mud-icon-root {
                                                    fill: @(cssVar.Value) !important;
                                                }
                                            </style>
                                            @cssVar.Key
                                        </MudListItem>
                                    }
                                }
                            }

                        </MudList>
                    </MudPaper>
                </MudTabPanel>
            }
            <MudTabPanel Text="Custom">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" DisableToolbar="false" ValueChanged="@(Select)" PickerVariant="PickerVariant.Static" />
            </MudTabPanel>
        </MudTabs>;
    }

    private void Select(string color)
    {
        ValueChanged.InvokeAsync(Value = color);
        OnSet(Value);
        Close();
    }

    private void Select(Color color)
    {
        ValueChanged.InvokeAsync(Value = color);
        OnSet(Value);
        Close();
    }

    private void Select(MudColor color)
    {
        ValueChanged.InvokeAsync(Value = color);
        OnSet(Value);
    }

    public enum ColorPreviewMode
    {
        None,
        Text,
        Icon,
        Both
    }
}



