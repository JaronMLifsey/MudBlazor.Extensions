@inherits MudExJsRequiredBaseComponent<T>
@typeparam T
@typeparam TFile

@if ((IsReady || RenderBehaviourWhileInitialization is FilePickerInitialRenderBehaviour.Normal or FilePickerInitialRenderBehaviour.Disabled or FilePickerInitialRenderBehaviour.SwitchIconToColored) && !IsLoading)
{
    @if (ActionViewMode == PickerActionViewMode.Image)
    {
        <MudTooltip>
            <TooltipContent>
                @if (ChildContent != null)
                {
                    @ChildContent(this)
                }
            </TooltipContent>
            <ChildContent>
                <MudButton Disabled="@(!IsReady && RenderBehaviourWhileInitialization is FilePickerInitialRenderBehaviour.Disabled)" Style="@($"width: {ImageSize.Width.ToString()}; height: {ImageSize.Height.ToString()}")" OnClick="@Pick">
                    <MudExIcon Color="@Color" Style="height: 100%; width: 100%" Icon="@(DefaultIcon)" />
                </MudButton>
            </ChildContent>
        </MudTooltip>
    }
    @if (ActionViewMode == PickerActionViewMode.Button)
    {
        <MudButton Variant="@Variant"
                   Disabled="@(!IsReady && RenderBehaviourWhileInitialization is FilePickerInitialRenderBehaviour.Disabled)"
                   Color="@Color"
                   Size="@Size"
                   StartIcon="@(StartIcon ?? DefaultIcon)" OnClick="@Pick">
            @if (ChildContent != null)
            {
                @ChildContent(this)
            }
        </MudButton>
    }
    @if (ActionViewMode == PickerActionViewMode.Custom)
    {
        @if (ChildContent != null)
        {
            @ChildContent(this)
        }
    }
}
else if (IsLoading || RenderBehaviourWhileInitialization == FilePickerInitialRenderBehaviour.Loading)
{
    <MudProgressCircular Size="@Size" Color="@Color" Indeterminate="true" />
}

