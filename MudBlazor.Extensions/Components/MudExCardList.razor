@inherits MudExBaseComponent<MudExCardList<T>>
@using Microsoft.AspNetCore.Components.Rendering
@using Nextended.Core.Extensions
@typeparam T

<div class="mud-ex-card-list">
    <MudGrid Class="mud-ex-cards">
        @RenderCards
    </MudGrid>
</div>
@*<div class="mud-ex-card-list">
    <div class="mud-ex-cards">
        @RenderCards
    </div>
</div>
*@

@code
{
    private void RenderCards(RenderTreeBuilder builder)
    {
        foreach (var item in Items.EmptyIfNull())
        {
            RenderCard(builder, item);
        }

    }

    private void RenderCard(RenderTreeBuilder __builder, T item)
    {
        <div class="mud-ex-card">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">The Story Book</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>This day everything happend.</MudText>
                    <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
        //<MudChip Size="Size.Large" Variant="@ChipVariant" OnClose="@(( ReadOnly ? null : chip => Remove(chip, item)))" Color="@ChipColor" CloseIcon="@Icons.Material.Filled.Close">
        //    @RenderItem(__builder, item)
        //</MudChip>
    }

    //protected virtual RenderFragment RenderItem(RenderTreeBuilder __builder, T item)
    //{
    //    if (ItemTemplate != null)
    //        return ItemTemplate(item);
    //    string name = ItemNameRender(item);
    //    return @<p>@name</p>;
    //}

}