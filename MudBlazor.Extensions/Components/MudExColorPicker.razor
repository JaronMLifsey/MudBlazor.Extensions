@using MudBlazor.Utilities
@inherits MudColorPicker

@if (UseNativeBrowserControl)
{
    @if (UseColorPaletteInNativeBrowserControl)
    {
        <input list="@presetId" type="color" @onchange="@NativeColorChange" value="@Value.ToString(MudColorOutputFormats.Hex)" />

        <datalist id="@presetId">
            @foreach (var preset in Palette)
            {
                <option value="@preset.ToString(MudColorOutputFormats.Hex)">@preset.ToString(MudColorOutputFormats.Hex)</option>
            }
        </datalist>
    }
    else
    {
        <input type="color" @onchange="@NativeColorChange" value="@Value.ToString(MudColorOutputFormats.Hex)" />
    }
}
else
{
    @Inherited()
}

@code {
    [Parameter] public bool DelayValueChangeToPickerClose { get; set; } = true;
    [Parameter] public bool UseNativeBrowserControl { get; set; }
    [Parameter] public bool UseColorPaletteInNativeBrowserControl { get; set; }

    private string presetId = $"preset-{Guid.NewGuid()}";
    private bool ShouldDelay => DelayValueChangeToPickerClose && PickerVariant != PickerVariant.Static;
    protected RenderFragment Inherited() => builder => base.BuildRenderTree(builder);
    EventCallback<MudColor> _originalValueChanged;

    protected override void OnPickerOpened()
    {
        base.OnPickerOpened();
        if (!ShouldDelay) return;

        _originalValueChanged = ValueChanged;
        ValueChanged = EventCallback.Factory.Create(this,
            EventCallback.Factory.CreateInferred(this, x =>
                null,
                Value
                )
            );
    }

    protected override void OnPickerClosed()
    {
        if (ShouldDelay)
            _originalValueChanged.InvokeAsync(Value);
        base.OnPickerClosed();
    }

    private Task NativeColorChange(ChangeEventArgs arg)
    {
        Value = new MudColor(arg.Value.ToString());
        return ValueChanged.InvokeAsync(Value);
    }

}
