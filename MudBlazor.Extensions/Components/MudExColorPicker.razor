@using MudBlazor.Utilities
@using Nextended.Core.Extensions
@using System.Reflection
@inherits MudColorPicker

@if (UseNativeBrowserControl || UseMudExColorBubble)
{
    <div>
        @if (UseNativeBrowserControl)
        {
            @if (UseColorPaletteInNativeBrowserControl)
            {
                <input class="@(PickerVariant != PickerVariant.Static ? "mud-ex-input-color-native" : "")" list="@presetId" type="color" @oninput="@NativeSelectionChange" @onchange="@NativeColorChange" value="@Value.ToString(MudColorOutputFormats.Hex)"/>

                <datalist id="@presetId">
                    @foreach (var preset in Palette)
                    {
                        <option value="@preset.ToString(MudColorOutputFormats.Hex)">@preset.ToString(MudColorOutputFormats.Hex)</option>
                    }
                </datalist>
            }
            else
            {
                <input class="@(PickerVariant != PickerVariant.Static ? "mud-ex-input-color-native" : "")" type="color" @oninput="@NativeSelectionChange" @onchange="@NativeColorChange" value="@Value.ToString(MudColorOutputFormats.Hex)"/>
            }
        }else if (UseMudExColorBubble)
        {

            <MudExColorBubble Class="@(PickerVariant != PickerVariant.Static ? "mud-ex-color-bubble-in-mud-ex-color-picker" : "")" @bind-Color="@Value"></MudExColorBubble>
        }

        @if (PickerVariant != PickerVariant.Static)
        {
            <MudTextField @bind-Value="@Value"
                          Variant="@Variant"
                          Class="@Class"
                          Style="@Style"
                          Converter="@ColorConverter"
                          Clearable="@Clearable"
                          For="@For"
                          Label="@Label"
                          Placeholder="@Placeholder"
                          Disabled="@Disabled"
                          ReadOnly="@ReadOnly"
                          HelperText="@HelperText">

            </MudTextField>
        }

    </div>
}
else
{
    @Inherited()
}

@code {
    [Parameter] public bool DelayValueChangeToPickerClose { get; set; } = true;
    [Parameter] public bool UseNativeBrowserControl { get; set; }
    [Parameter] public bool UseMudExColorBubble { get; set; }
    [Parameter] public bool UseColorPaletteInNativeBrowserControl { get; set; }
    [Parameter] public MudColor InitialColor { get; set; }

    private string presetId = $"preset-{Guid.NewGuid()}";
    private bool ShouldDelay => DelayValueChangeToPickerClose && PickerVariant != PickerVariant.Static;
    protected RenderFragment Inherited() => builder => base.BuildRenderTree(builder);
    EventCallback<MudColor> _originalValueChanged;

    protected override void OnInitialized()
    {
        SetInitialColorOneTime();
        base.OnInitialized();
    }

    private void SetInitialColorOneTime()
    {
        if (InitialColor != null)
        {
            try
            {
                var fieldInfo = typeof(MudColorPicker).GetField("_color", BindingFlags.NonPublic | BindingFlags.Instance);
                var c = fieldInfo?.GetValue(this) as MudColor;
                fieldInfo?.SetValue(this, InitialColor);
                typeof(MudColorPicker).GetMethod("UpdateBaseColor", BindingFlags.NonPublic | BindingFlags.Instance)?.Invoke(this, new object[] { });
                typeof(MudColorPicker).GetMethod("UpdateColorSelectorBasedOnRgb", BindingFlags.NonPublic | BindingFlags.Instance)?.Invoke(this, new object[] { });
                typeof(MudColorPicker).GetMethod("UpdateBaseColorSlider", BindingFlags.NonPublic | BindingFlags.Instance)?.Invoke(this, new object[] { InitialColor.H });
                typeof(MudColorPicker).GetMethod("SelectPaletteColor", BindingFlags.NonPublic | BindingFlags.Instance)?.Invoke(this, new object[] { InitialColor });
                SetTextAsync(InitialColor.ToString(!DisableAlpha ? MudColorOutputFormats.HexA : MudColorOutputFormats.Hex), false).AndForget();
                FieldChanged(InitialColor);
                StateHasChanged();
                fieldInfo?.SetValue(this, c);
            }
            catch { /* ignore */ }
        }
    }

    protected override void OnPickerOpened()
    {

        base.OnPickerOpened();
        if (!ShouldDelay) return;

        _originalValueChanged = ValueChanged;
        ValueChanged = EventCallback.Factory.Create(this,
            EventCallback.Factory.CreateInferred(this, x =>
                null,
                Value
                )
            );
    }

    protected override void OnPickerClosed()
    {
        if (ShouldDelay)
            _originalValueChanged.InvokeAsync(Value);
        base.OnPickerClosed();
    }

    private Task NativeColorChange(ChangeEventArgs arg)
    {
        Value = new MudColor(arg.Value.ToString());
        return ValueChanged.InvokeAsync(Value);
    }


    private Task NativeSelectionChange(EventArgs arg)
    {
        if (!DelayValueChangeToPickerClose)
        {
            var args = arg as ChangeEventArgs;
            Value = new MudColor(args.Value.ToString());
            return ValueChanged.InvokeAsync(Value);
        }
        return Task.CompletedTask;
    }

    public MudBlazor.Converter<MudColor, string> ColorConverter { get; set; } = new()
    {
        GetFunc = s => new MudColor(s),
        SetFunc = c => c.ToString(MudColorOutputFormats.Hex)
    };


}
