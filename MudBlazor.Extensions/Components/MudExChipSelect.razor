@using Nextended.Core.Extensions
@using Microsoft.AspNetCore.Components.Rendering
@typeparam T
@inject Microsoft.Extensions.Localization.IStringLocalizer<MudExChipSelect<T>> _localizer

<MudGrid>
    @if (ViewMode == ViewMode.ChipsAdditionalAbove)
    {
        <MudItem xs="12" md="12">
            @RenderChips
        </MudItem>
    }

    <MudItem xs="12" md="12">
        @if (ViewMode == ViewMode.ChipsOnly)
        {
            @RenderChips
        }
        <div class="select-container">
            <MudSelect T="@T" MultiSelectionTextFunc="MultiSelectionTextFunc"
                       For="@For"
                       Variant="@(ViewMode != ViewMode.ChipsOnly ? Variant : Variant.Text)"
                       Label="@(!Label.IsNullOrWhiteSpace() ? _localizer[Label] : "")" 
                       HelperText="@(!HelperText.IsNullOrWhiteSpace() ? _localizer[HelperText] : "")"
                       Clearable="@(!ReadOnly)"
                       ReadOnly="@ReadOnly"
                       Adornment="@(ReadOnly ? Adornment.None : Adornment)"
                       SelectAll="false"
                       DisableUnderLine="@DisableUnderLine"
                       Class="@_cssName"
                       PopoverClass="@($"{_cssName}-over chip-select-over")"
                       MultiSelection="@MultiSelect" 
                       AnchorOrigin="Origin.BottomCenter"
                       @bind-Value="Value" 
                       @bind-SelectedValues="Selected"
                       AdornmentIcon="@AdornmentIcon">
                @if (FilterEnabled)
                {
                    <MudSelectItem Class="filter-select" T="@T" Value="default">
                        <MudTextField onclick="event.stopPropagation();" Immediate="true" Clearable="true" @bind-Value="Filter" AutoFocus="@(AutoFocusFilter && FilterEnabled)" T="string" Placeholder="@_localizer["Filter"]" Label="@_localizer["Filter"]"/>
                    </MudSelectItem>
                }
                @foreach (var item in _available.EmptyIfNull().Where(arg => arg != null && (Filter.IsNullOrWhiteSpace() || ItemNameRender(arg)?.Contains(Filter, StringComparison.CurrentCultureIgnoreCase) == true)))
                {
                    <MudSelectItem Style="height: 70px;" T="@T" Value="@item">
                        @if (UseCustomItemRenderInSelectionPopover)
                        {
                           @* @((RenderTreeBuilder b) => RenderItem(b, item))*@
                            @RenderItem(this.ExposeField<RenderTreeBuilder>("__builder"), item)
                        }
                        else
                        {
                            <MudHighlighter Text="@ItemNameRender(item)" HighlightedText="@Filter"/>
                        }
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
    </MudItem>
    
    @if (ViewMode == ViewMode.ChipsAdditionalBelow)
    {
        <MudItem xs="12" md="12">
            @RenderChips
        </MudItem>
    }

</MudGrid>

@code
{
    private void RenderChips(RenderTreeBuilder builder)
    {
        foreach (var item in Selected.Where(arg => arg != null))
        {
            RenderChip(builder, item);
        }
    }

    private void RenderChip(RenderTreeBuilder __builder, T item)
    {
    <MudChip Size="Size.Large" Variant="@ChipVariant" OnClose="@(( ReadOnly ? null : chip => Remove(chip, item)))" Color="@ChipColor" CloseIcon="@Icons.Material.Filled.Close">
                @RenderItem(__builder, item)
    </MudChip>
    }

    protected virtual RenderFragment RenderItem(RenderTreeBuilder __builder, T item)
    {
        if (ItemTemplate != null)
            return ItemTemplate(item);
        string name = ItemNameRender(item);
        return @<p>@name</p>;
    }

}
